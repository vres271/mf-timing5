version: '3.8'

services:
  db:
    image: postgres:17-alpine
    container_name: db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.mft5.version=1.0"
      - "com.mft5.service=database"

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.mft5.version=1.0"
      - "com.mft5.service=cache"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ghcr.io/vres271/backend:1.0.0
    container_name: backend
    environment:
      NODE_ENV: production
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      JWT_SECRET_KEY_FILE: /run/secrets/jwt_secret_key
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3000:3000"
    secrets:
      - jwt_secret_key
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.mft5.version=1.0.0"
      - "com.mft5.service=backend-api"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: ghcr.io/vres271/frontend:1.0.0
    container_name: frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network
    labels:
      - "com.mft5.version=1.0.0"
      - "com.mft5.service=frontend"

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: ghcr.io/vres271/nginx:1.0.0
    container_name: nginx
    ports:
      - "8080:443"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf
    secrets:
      - jwt_secret_key
      - ssl_certificate
      - ssl_private_key
    depends_on:
      - frontend
      - backend
      - redis
    networks:
      - app-network
    labels:
      - "com.mft5.version=1.0.0"
      - "com.mft5.service=load-balancer"
    extra_hosts:
      - "host.docker.internal:host-gateway"      

volumes:
  postgres_data:
    driver: local
    labels:
      - "com.mft5.volume=postgres-data"
  redis_data:
    driver: local
    labels:
      - "com.mft5.volume=redis-data"

secrets:
  jwt_secret_key:
    file: ./secrets/jwt_secret.key
    labels:
      - "com.mft5.secret=jwt-key"
  ssl_certificate:
    file: ./secrets/ssl_certificate.crt
    labels:
      - "com.mft5.secret=ssl-cert"
  ssl_private_key:
    file: ./secrets/ssl_private.key
    labels:
      - "com.mft5.secret=ssl-key"

networks:
  app-network:
    driver: bridge
    labels:
      - "com.mft5.network=application"