name: Build and Deploy with GH Registry

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/mft5
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  PROJECT_DIR: /home/deploy/app/mft5
  COMPOSE_PROD_FILE: docker-compose.prod.yml

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create production compose file
        run: |
          # Создаем упрощенный файл для продакшена
          sed '/build:/,/dockerfile: Dockerfile/d' docker-compose.yml > ${{ env.COMPOSE_PROD_FILE }}
          echo "Created production compose file:"
          cat ${{ env.COMPOSE_PROD_FILE }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:${{ github.sha }}

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend:${{ github.sha }}

      - name: Build and push nginx
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-nginx:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-nginx:${{ github.sha }}

      - name: Upload production compose file
        uses: actions/upload-artifact@v3
        with:
          name: production-compose
          path: ${{ env.COMPOSE_PROD_FILE }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Download production compose file
        uses: actions/download-artifact@v3
        with:
          name: production-compose

      - name: Install SSH Key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Test SSH Connection
        run: |
          echo "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"
          ssh -o StrictHostKeyChecking=no -T ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} echo "SSH connection successful"

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ env.PROJECT_DIR }}
            
            # Логинимся в GHCR
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Копируем production compose файл
            cat << 'EOF' > ${{ env.COMPOSE_PROD_FILE }}
            $(cat ${{ env.COMPOSE_PROD_FILE }})
            EOF
            
            # Останавливаем старые контейнеры
            docker-compose -f ${{ env.COMPOSE_PROD_FILE }} down
            
            # Подтягиваем новые образы
            docker-compose -f ${{ env.COMPOSE_PROD_FILE }} pull
            
            # Запускаем
            docker-compose -f ${{ env.COMPOSE_PROD_FILE }} up -d
            
            # Очистка
            docker system prune -af