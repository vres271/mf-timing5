events {}
http {
  lua_package_path "/usr/local/openresty/lualib/?.lua;;";

  # Инициализируем shared dict для кэширования соединений с Redis
  lua_shared_dict redis_connections 1m;

  # Указываем DNS-резолвер
  resolver 127.0.0.11 valid=30s;

  server {
    listen 443 ssl;

    # Пути к SSL-сертификатам и ключу
    ssl_certificate /run/secrets/ssl_certificate;
    ssl_certificate_key /run/secrets/ssl_private_key;

    location / {
      proxy_pass http://frontend:80;
    }

    # Обработка запроса /api/logout
    location /api/auth/logout {
      # Проксируем запрос на бэкенд
      proxy_pass http://host.docker.internal:3000/auth/logout;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # Очищаем куки и добавляем токен в чёрный список после перенаправления запроса на бэк
      access_by_lua_block {
        local jwt = require "resty.jwt"
        local redis = require "resty.redis"
        local red = redis:new()

        -- Указываем таймаут для подключения к Redis
        red:set_timeout(1000)  -- 1 секунда

        -- Подключаемся к Redis
        local ok, err = red:connect("redis", 6379)
        if not ok then
          ngx.log(ngx.ERR, "Failed to connect to Redis: ", err)
          return
        end

        -- Получаем access token из куки
        local access_token = ngx.var.cookie_access_token
        if access_token then

          -- Декодируем токен, чтобы извлечь поле exp
          local jwt_obj = jwt:load_jwt(access_token)
          if not jwt_obj.valid then
            ngx.log(ngx.ERR, "Invalid JWT token")
            ngx.status = ngx.HTTP_UNAUTHORIZED
            ngx.say('{"error": "Invalid token"}')
            return ngx.exit(ngx.HTTP_UNAUTHORIZED)
          end        

          local exp = jwt_obj.payload.exp
          if not exp then
            ngx.log(ngx.ERR, "Token does not have exp field")
            ngx.status = ngx.HTTP_UNAUTHORIZED
            ngx.say('{"error": "Token does not have expiration time"}')
            return ngx.exit(ngx.HTTP_UNAUTHORIZED)
          end

          -- Вычисляем оставшееся время жизни токена
          local current_time = os.time()
          local ttl = exp - current_time

          if ttl <= 0 then
            ngx.log(ngx.ERR, "Token has already expired")
            ngx.status = ngx.HTTP_UNAUTHORIZED
            ngx.say('{"error": "Token has already expired"}')
            return ngx.exit(ngx.HTTP_UNAUTHORIZED)
          end

          -- Добавляем токен в чёрный список с TTL, равным оставшемуся времени жизни
          local res, err = red:set("blacklist:" .. access_token, true, "EX", ttl)
          if not res then
            ngx.log(ngx.ERR, "Failed to add token to Redis blacklist: ", err)
          end
        end

        -- Очищаем куки
        ngx.header["Set-Cookie"] = {
          "access_token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; Secure",
          "refresh_token=; Path=/api/auth; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; Secure"
        }
      }

    }

    location /api {
      access_by_lua_block {
          local jwt = require("resty.jwt")
          local path = ngx.var.uri  -- Получаем путь запроса

          -- Эндпоинты, которые не требуют проверки JWT
          local excluded_paths = {
              ["/auth/login"] = true,
              ["/auth/refresh"] = true
          }

          -- Если путь исключён, пропускаем проверку JWT
          if excluded_paths[path] then
              return
          end

          -- Проверка JWT для остальных запросов
          -- local auth_header = ngx.var.http_Authorization
          -- if not auth_header then
          --     ngx.status = ngx.HTTP_UNAUTHORIZED
          --     ngx.header["Content-Type"] = "application/json" 
          --     ngx.say('{"error": "Missing Authorization header", "statusCode": ' .. ngx.status .. '}')
          --     return ngx.exit(ngx.HTTP_UNAUTHORIZED)
          -- end

          -- Получаем куку с токеном
          local cookie = ngx.var.http_cookie
          if not cookie then
              ngx.status = ngx.HTTP_UNAUTHORIZED
              ngx.header["Content-Type"] = "application/json"
              ngx.say('{"error": "Unauthorized: No cookie found", "statusCode": ' .. ngx.status .. '}')
              return ngx.exit(ngx.HTTP_UNAUTHORIZED)
          end

          -- local token = string.match(auth_header, "Bearer%s+(.+)")
          -- if not token then
          --     ngx.status = ngx.HTTP_UNAUTHORIZED
          --     ngx.header["Content-Type"] = "application/json"
          --     ngx.say('{"error": "Invalid token format", "statusCode": ' .. ngx.status .. '}')
          --     return ngx.exit(ngx.HTTP_UNAUTHORIZED)
          -- end

          -- Извлекаем JWT токен из куки
          local token = ngx.var.cookie_access_token
          if not token then
              ngx.status = ngx.HTTP_UNAUTHORIZED
              ngx.say('{"error": "Unauthorized: No access token found", "statusCode": ' .. ngx.status .. '}')
              return ngx.exit(ngx.HTTP_UNAUTHORIZED)
          end

          -- Проверяем, находится ли токен в чёрном списке
          local redis = require "resty.redis"
          local red = redis:new()

          -- Указываем таймаут для подключения к Redis
          red:set_timeout(1000)  -- 1 секунда

          -- Подключаемся к Redis
          red:set_timeout(1000)  -- Таймаут 1 секунда
          local ok, err = red:connect("redis", 6379)
          if not ok then
            ngx.log(ngx.ERR, "Failed to connect to Redis: ", err)
            ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
            ngx.say('{"error": "Internal Server Error (Redis connection)"}')
            return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          local is_blacklisted, err = red:get("blacklist:" .. token)
          if is_blacklisted == "true" then
              ngx.status = ngx.HTTP_UNAUTHORIZED
              ngx.header["Content-Type"] = "application/json"
              ngx.say('{"error": "Unauthorized: Token is blacklisted", "statusCode": ' .. ngx.status .. '}')
              return ngx.exit(ngx.HTTP_UNAUTHORIZED)
          end

          local secret_key_file = "/run/secrets/jwt_secret_key"
          local file = io.open(secret_key_file, "r")
          if not file then
              ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
              ngx.header["Content-Type"] = "application/json"
              ngx.say('{"error": "Failed to read JWT secret key file", "statusCode": ' .. ngx.status .. '}')
              return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end
          local secret_key = file:read("*a"):gsub("%s+", "")  -- Убираем лишние пробелы и переводы строк
          file:close()

          -- Проверка токена
          local jwt_obj = jwt:verify(secret_key, token)
          if not jwt_obj.verified then
              ngx.status = ngx.HTTP_UNAUTHORIZED
              ngx.header["Content-Type"] = "application/json"
              ngx.say('{"error": "Invalid token", "message": "' .. jwt_obj.reason .. '", "statusCode": ' .. ngx.status .. '}') 
              return ngx.exit(ngx.HTTP_UNAUTHORIZED)
          end

          -- Проверяем срок действия токена
          if jwt_obj.payload.exp and jwt_obj.payload.exp < os.time() then
              ngx.status = ngx.HTTP_UNAUTHORIZED
              ngx.say('{"error": "Unauthorized: Token expired", "statusCode": ' .. ngx.status .. '}')
              return ngx.exit(ngx.HTTP_UNAUTHORIZED)
          end

          ngx.req.set_header("X-User", jwt_obj.payload.sub)
          ngx.req.set_header("X-Roles", table.concat(jwt_obj.payload.roles, ","))
      }

      rewrite ^/api/(.*) /$1 break;
      proxy_pass http://host.docker.internal:3000;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
  }
}